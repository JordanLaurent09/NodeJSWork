Базовые команды Dockerfile

1. FROM - определяет базовый образ, с которого начинается создание нового образа. Это первая инструкция в любом Dockerfile 
(FROM ubuntu:23.3, FROM node:alpine)

2. RUN - выполняет команды в контейнере. Обычно используется для установки ПО
run apt-get update && apt-get install -y python3
run apt-get update

3. COPY - копирует файлы и каталоги из локальной файловой системы из хоста в файловую систему контейнера

4. ADD - как copy, но поддерживает добавление файлов из url и добавление архивов

5. CMD - определяет команду, которая будет выполнена при запуске контейнера. Если таких команд несколько - выполняется только ПОСЛЕДНЯЯ

6. WORKDIR - устанавливает рабочий каталог для следующих инструкций RUN, CMD, ENTRYPOINT, COPY, ADD

7. ENTRYPOINT - используется для задания исполняемой команды или программы, которая будет запущена при запуске контейнера. Она может быть
использована самостоятельно или в комбинации с командой CMD

8. ENV - используется для установки переменных среды в контейнере Docker. Эти переменные могут быть доступны для всех последующих ...

9. EXPOSE - используется для указания портов, которые контейнер будет слушать во время его выполнения. Это не открывает порты на хостовой машине,
а лишь документирует, какте порты контейнер ожидает, что облегчает коммуникацию и взаимодействие с другими контейнерами или приложениями

10. USER - используется для установки пользователя и/или группы, под которыми будут выполняться инструкции в контейнере. Это позволит повысить безопасность и изолированность процессов, ограничивая права доступа внутри контейнера

Простейший Dockerfile

FROM node:alpine

WORKDIR /usr/src/app

COPY . .

ENV NODE_ENV=production

EXPOSE 3000

CMD ["node", "Project/index.js"]



Команды Docker CLI

docker build - позволяет создать образ Docker

docker build [OPTIONS] PATH | URL | -

Аргументы и атрибуты:
PATH | URL| - Путь к контектсу сборки или для чтения - из стандартного ввода
-t, --tag - назначает тег создаваемому образу
-f, --file - указывает путь к альтернативному Dockerfile
--build-arg - передает аргументы сборки
--no-cache - создает образ без использования кеша
--rm - удаляет промежуточные контейнеры после успешной сборки
--pull - всегда пытается загрузить обновленные версии базовых образов.